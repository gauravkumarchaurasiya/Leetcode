[
  {
    "leetcode_id": "longest-substring-without-repeating-characters",
    "title": "Longest-substring-without-repeating-characters",
    "tags": [
      "sliding window"
    ],
    "python_solution": "class Solution:\r\n    def lengthOfLongestSubstring(self, s: str) -> int:\r\n        seen_chars = {}\r\n        left = 0\r\n        max_length = 0\r\n\r\n        for right in range(len(s)):\r\n            if s[right] in seen_chars and seen_chars[s[right]] >= left:\r\n                left = seen_chars[s[right]] + 1\r\n            seen_chars[s[right]] = right\r\n            max_length = max(max_length, right - left + 1)\r\n        \r\n        return max_length"
  },
  {
    "leetcode_id": "valid-parentheses",
    "title": "Valid-parentheses",
    "tags": [
      "stack"
    ],
    "python_solution": "class Solution:\r\n    def isValid(self, s: str) -> bool:\r\n        stack = []\r\n        mapping = {')': '(', ']': '[', '}': '{'}\r\n        \r\n        for char in s:\r\n            if char in mapping:\r\n                top = stack.pop() if stack else '#'\r\n                if mapping[char] != top:\r\n                    return False\r\n            else:\r\n                stack.append(char)\r\n                \r\n        return not stack"
  },
  {
    "leetcode_id": "rotate-list",
    "title": "Rotate-list",
    "tags": [
      "In-place Reversal of a LinkedList",
      "linkedlist"
    ],
    "python_solution": "# Definition for singly-linked list.\r\n# class ListNode:\r\n#     def __init__(self, val=0, next=None):\r\n#         self.val = val\r\n#         self.next = next\r\nclass Solution:\r\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\r\n        if not head or k == 0:\r\n            return head\r\n\r\n        length = 1\r\n        tail = head\r\n        while tail.next:\r\n            tail = tail.next\r\n            length += 1\r\n\r\n        k = k % length\r\n        if k == 0:\r\n            return head\r\n\r\n        split = length - k\r\n        prev = None\r\n        curr = head\r\n        for _ in range(split):\r\n            prev = curr\r\n            curr = curr.next\r\n\r\n        prev.next = None\r\n\r\n        def reverse_list(start, end=None):\r\n            prev = None\r\n            while start != end:\r\n                nxt = start.next\r\n                start.next = prev\r\n                prev = start\r\n                start = nxt\r\n            return prev\r\n\r\n        first = reverse_list(head)\r\n        second = reverse_list(curr)\r\n\r\n        temp = first\r\n        while temp.next:\r\n            temp = temp.next\r\n        temp.next = second\r\n\r\n        return reverse_list(first)"
  },
  {
    "leetcode_id": "reverse-linked-list-ii",
    "title": "Reverse-linked-list-ii",
    "tags": [
      "In-place Reversal of a LinkedList"
    ],
    "python_solution": "# Definition for singly-linked list.\r\n# class ListNode:\r\n#     def __init__(self, val=0, next=None):\r\n#         self.val = val\r\n#         self.next = next\r\nclass Solution:\r\n    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:\r\n        if not head or left == right:\r\n            return head\r\n        \r\n        # Create a dummy node to make handling the head of the list easier\r\n        dummy = ListNode(0)\r\n        dummy.next = head\r\n        prev = dummy\r\n\r\n        # Move `prev` to the node just before the left position\r\n        for _ in range(left - 1):\r\n            prev = prev.next\r\n\r\n        # The first node of the sublist that will be reversed\r\n        curr = prev.next\r\n\r\n        # Reverse the sublist from left to right\r\n        for _ in range(right - left):\r\n            temp = curr.next\r\n            curr.next = temp.next\r\n            temp.next = prev.next\r\n            prev.next = temp\r\n\r\n        return dummy.next\r\n            "
  },
  {
    "leetcode_id": "rotate-list",
    "title": "Rotate-list",
    "tags": [
      "In-place Reversal of a LinkedList"
    ],
    "python_solution": "# Definition for singly-linked list.\r\n# class ListNode:\r\n#     def __init__(self, val=0, next=None):\r\n#         self.val = val\r\n#         self.next = next\r\nclass Solution:\r\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\r\n        if not head or not head.next or k == 0:\r\n            return head\r\n\r\n        length = 1\r\n        tail = head\r\n        while tail.next:\r\n            tail = tail.next\r\n            length += 1\r\n\r\n        k = k % length\r\n        if k == 0:\r\n            return head\r\n\r\n        new_tail = head\r\n        for _ in range(length - k - 1):\r\n            new_tail = new_tail.next\r\n\r\n        new_head = new_tail.next\r\n        new_tail.next = None\r\n        tail.next = head\r\n\r\n        return new_head"
  },
  {
    "leetcode_id": "fruit-into-baskets",
    "title": "Fruit-into-baskets",
    "tags": [
      "sliding window"
    ],
    "python_solution": "class Solution:\r\n    def totalFruit(self, fruits: List[int]) -> int:\r\n        fruit_count = defaultdict(int)\r\n        left = 0\r\n        max_fruits = 0\r\n\r\n        for right in range(len(fruits)):\r\n            fruit_count[fruits[right]] += 1\r\n\r\n            while len(fruit_count) > 2:\r\n                fruit_count[fruits[left]] -= 1\r\n                if fruit_count[fruits[left]] == 0:\r\n                    del fruit_count[fruits[left]]\r\n                left += 1\r\n\r\n            max_fruits = max(max_fruits, right - left + 1)\r\n\r\n        return max_fruits"
  },
  {
    "leetcode_id": "reverse-linked-list",
    "title": "Reverse-linked-list",
    "tags": [
      "linkedlist",
      "slow-fast pointer"
    ],
    "python_solution": "# Definition for singly-linked list.\r\n# class ListNode:\r\n#     def __init__(self, val=0, next=None):\r\n#         self.val = val\r\n#         self.next = next\r\nclass Solution:\r\n    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:\r\n        prev = None\r\n        curr = head\r\n        while curr:\r\n            next_node = curr.next\r\n            curr.next = prev\r\n            prev = curr\r\n            curr = next_node\r\n        return prev\r\n"
  },
  {
    "leetcode_id": "reorder-list",
    "title": "Reorder-list",
    "tags": [
      "linkedlist",
      "slow-fast pointer"
    ],
    "python_solution": "# Definition for singly-linked list.\r\n# class ListNode:\r\n#     def __init__(self, val=0, next=None):\r\n#         self.val = val\r\n#         self.next = next\r\nclass Solution:\r\n    def reorderList(self, head: Optional[ListNode]) -> None:\r\n        if not head or not head.next:\r\n            return\r\n\r\n        # Step 1: Find middle using slow and fast pointers\r\n        slow, fast = head, head\r\n        while fast and fast.next:\r\n            slow = slow.next\r\n            fast = fast.next.next\r\n\r\n        # Step 2: Reverse second half\r\n        prev = None\r\n        curr = slow.next\r\n        slow.next = None  # Cut off first half\r\n\r\n        while curr:\r\n            next_node = curr.next\r\n            curr.next = prev\r\n            prev = curr\r\n            curr = next_node\r\n\r\n        # Step 3: Merge two halves\r\n        first, second = head, prev\r\n        while second:\r\n            tmp1, tmp2 = first.next, second.next\r\n            first.next = second\r\n            second.next = tmp1\r\n            first, second = tmp1, tmp2"
  },
  {
    "leetcode_id": "palindrome-linked-list",
    "title": "Palindrome-linked-list",
    "tags": [
      "linkedlist",
      "slow-fast pointer"
    ],
    "python_solution": "# Definition for singly-linked list.\r\n# class ListNode:\r\n#     def __init__(self, val=0, next=None):\r\n#         self.val = val\r\n#         self.next = next\r\nclass Solution:\r\n    def isPalindrome(self, head: Optional[ListNode]) -> bool:\r\n        # Step 1: Find middle\r\n        slow = fast = head\r\n        while fast and fast.next:\r\n            slow = slow.next\r\n            fast = fast.next.next\r\n\r\n        # Step 2: Reverse second half\r\n        prev = None\r\n        while slow:\r\n            next_node = slow.next\r\n            slow.next = prev\r\n            prev = slow\r\n            slow = next_node\r\n\r\n        # Step 3: Compare halves\r\n        left, right = head, prev\r\n        while right:\r\n            if left.val != right.val:\r\n                return False\r\n            left = left.next\r\n            right = right.next\r\n\r\n        return True"
  },
  {
    "leetcode_id": "happy-number",
    "title": "Happy number",
    "tags": [
      "linkedlist",
      "slow-fast pointer"
    ],
    "python_solution": "class Solution:\r\n    def isHappy(self, n: int) -> bool:\r\n        def sqsum(n):\r\n            # sqsum = sum(int(x)**2 for x in str(n))\r\n            # return sqsum\r\n            s = 0\r\n            while(n):\r\n                s+= (n%10)**2\r\n                n//=10\r\n\r\n            return s\r\n\r\n        slow = n\r\n        fast = sqsum(n)\r\n        while fast!=1 and slow!=fast :\r\n            slow = sqsum(slow)\r\n            fast = sqsum(sqsum(fast))\r\n\r\n        return fast==1"
  },
  {
    "leetcode_id": "middle-of-the-linked-list",
    "title": "Middle-of-the-linked-list",
    "tags": [
      "linkedlist",
      "slow-fast pointer"
    ],
    "python_solution": "# Definition for singly-linked list.\r\n# class ListNode:\r\n#     def __init__(self, val=0, next=None):\r\n#         self.val = val\r\n#         self.next = next\r\nclass Solution:\r\n    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:\r\n        slow = head\r\n        fast = head\r\n        while(fast!=None and fast.next!=None):\r\n            slow = slow.next\r\n            fast = fast.next.next\r\n\r\n        return slow"
  },
  {
    "leetcode_id": "linked-list-cycle-ii",
    "title": "Linked-list-cycle-ii",
    "tags": [
      "linkedlist",
      "slow-fast pointer"
    ],
    "python_solution": "# Definition for singly-linked list.\r\n# class ListNode:\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution:\r\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\r\n        slow,fast = head,head\r\n        while fast != None and fast.next!= None:\r\n            fast = fast.next.next\r\n            slow = slow.next\r\n            if slow == fast:\r\n                cur = head\r\n                while cur != slow:\r\n                    cur = cur.next\r\n                    slow= slow.next\r\n                return slow"
  },
  {
    "leetcode_id": "linked-list-cycle",
    "title": "Linked list cycle",
    "tags": [
      "linkedlist",
      "slow-fast pointer"
    ],
    "python_solution": "# Definition for singly-linked list.\r\n# class ListNode:\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution:\r\n    def hasCycle(self, head: Optional[ListNode]) -> bool:\r\n        slow,fast = head,head\r\n        while fast is not None and fast.next is not None:\r\n            fast = fast.next.next\r\n            slow = slow.next \r\n            if fast == slow:\r\n                return True\r\n            \r\n        return False"
  },
  {
    "leetcode_id": "backspace-string-compare",
    "title": "Backspace string compare",
    "tags": [
      "array",
      "two pointer"
    ],
    "python_solution": "class Solution:\r\n    def backspaceCompare(self, s: str, t: str) -> bool:\r\n        def nxt(st, i):\r\n            skip = 0\r\n            while i >= 0:\r\n                if st[i] == '#':\r\n                    skip += 1\r\n                    i -= 1\r\n                elif skip > 0:\r\n                    skip -= 1\r\n                    i -= 1\r\n                else:\r\n                    break\r\n            return i\r\n\r\n        i, j = len(s) - 1, len(t) - 1\r\n\r\n        while i >= 0 or j >= 0:\r\n            i = nxt(s, i)\r\n            j = nxt(t, j)\r\n\r\n            if i >= 0 and j >= 0:\r\n                if s[i] != t[j]:\r\n                    return False\r\n            elif i >= 0 or j >= 0:\r\n                return False\r\n\r\n            i -= 1\r\n            j -= 1\r\n\r\n        return True"
  },
  {
    "leetcode_id": "shortest-unsorted-continuous-subarray",
    "title": "Shortest unsorted continuous subarray",
    "tags": [
      "array",
      "two pointer"
    ],
    "python_solution": "class Solution:\r\n    def findUnsortedSubarray(self, nums):\r\n        n = len(nums)\r\n        max_seen = float('-inf')\r\n        min_seen = float('inf')\r\n        left, right = 0, -1\r\n\r\n        for i in range(n):\r\n            if nums[i] >= max_seen:\r\n                max_seen = nums[i]\r\n            else:\r\n                right = i\r\n\r\n        for i in range(n - 1, -1, -1):\r\n            if nums[i] <= min_seen:\r\n                min_seen = nums[i]\r\n            else:\r\n                left = i\r\n\r\n        return right - left + 1"
  },
  {
    "leetcode_id": "4-Sum",
    "title": "4 Sum",
    "tags": [
      "array",
      "two pointer"
    ],
    "python_solution": "from typing import List\r\n\r\nclass Solution:\r\n    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:\r\n        nums.sort()\r\n        res = []\r\n        n = len(nums)\r\n\r\n        for i in range(n - 3):\r\n            if i > 0 and nums[i] == nums[i - 1]:\r\n                continue \r\n\r\n            for j in range(i + 1, n - 2):\r\n                if j > i + 1 and nums[j] == nums[j - 1]:\r\n                    continue  \r\n\r\n                left, right = j + 1, n - 1\r\n\r\n                while left < right:\r\n                    total = nums[i] + nums[j] + nums[left] + nums[right]\r\n\r\n                    if total == target:\r\n                        res.append([nums[i], nums[j], nums[left], nums[right]])\r\n                        left += 1\r\n                        right -= 1\r\n\r\n                        while left < right and nums[left] == nums[left - 1]:\r\n                            left += 1\r\n                        while left < right and nums[right] == nums[right + 1]:\r\n                            right -= 1\r\n\r\n                    elif total < target:\r\n                        left += 1\r\n                    else:\r\n                        right -= 1\r\n\r\n        return res"
  },
  {
    "leetcode_id": "subarray-product-less-than-k",
    "title": "Subarray product less than k",
    "tags": [
      "array",
      "two pointer",
      "sliding window"
    ],
    "python_solution": "class Solution:\r\n    def numSubarrayProductLessThanK(self, nums: List[int], k: int) -> int:\r\n        if k <= 1:\r\n            return 0\r\n\r\n        left = 0\r\n        prod = 1\r\n        count = 0\r\n\r\n        for right in range(len(nums)):\r\n            prod *= nums[right]\r\n            while prod >= k and left <= right:\r\n                prod //= nums[left]\r\n                left += 1\r\n            count += right - left + 1\r\n\r\n        return count"
  },
  {
    "leetcode_id": "3sum-smaller",
    "title": "3sum smaller",
    "tags": [
      "array",
      "two pointer"
    ],
    "python_solution": "def threeSumSmaller(nums, target):\r\n    nums.sort()\r\n    count = 0\r\n    n = len(nums)\r\n    \r\n    for i in range(n - 2):\r\n        left, right = i + 1, n - 1\r\n        \r\n        while left < right:\r\n            current_sum = nums[i] + nums[left] + nums[right]\r\n            if current_sum < target:\r\n                # All elements between left and right form valid triplets\r\n                count += right - left\r\n                left += 1\r\n            else:\r\n                right -= 1\r\n                \r\n    return count\r\n"
  },
  {
    "leetcode_id": "3sum-closest",
    "title": "3sum-closest",
    "tags": [
      "array",
      "two pointer"
    ],
    "python_solution": "from typing import List\r\n\r\nclass Solution:\r\n    def threeSumClosest(self, nums: List[int], target: int) -> int:\r\n        nums.sort()\r\n        closest_sum = nums[0] + nums[1] + nums[2]  \r\n\r\n        for i in range(len(nums) - 2):\r\n            left, right = i + 1, len(nums) - 1\r\n\r\n            while left < right:\r\n                curr_sum = nums[i] + nums[left] + nums[right]\r\n                if curr_sum == target:\r\n                    return curr_sum\r\n\r\n\r\n                if abs(curr_sum - target) < abs(closest_sum - target):\r\n                    closest_sum = curr_sum\r\n\r\n                if curr_sum < target:\r\n                    left += 1\r\n                else:\r\n                    right -= 1\r\n\r\n        return closest_sum"
  },
  {
    "leetcode_id": "3sum",
    "title": "3sum",
    "tags": [
      "array",
      "two pointer"
    ],
    "python_solution": "class Solution:\r\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\r\n        nums.sort()\r\n        ans = []\r\n\r\n        for i in range(len(nums)-2):\r\n            if(i>0 and nums[i]==nums[i-1]):\r\n                continue\r\n\r\n            left = i+1\r\n            right = len(nums)-1\r\n            target = -nums[i]\r\n            while(left<right):\r\n                if(nums[left]+nums[right]==target):\r\n                    ans.append([nums[i],nums[left],nums[right]])\r\n                    \r\n                    # Skip duplicates for left pointer\r\n                    while left < right and nums[left] == nums[left + 1]:\r\n                        left += 1\r\n                    # Skip duplicates for right pointer\r\n                    while left < right and nums[right] == nums[right - 1]:\r\n                        right -= 1\r\n\r\n                    left += 1\r\n                    right -= 1\r\n\r\n                elif(nums[left]+nums[right] < target):\r\n                    left+=1\r\n                else:\r\n                    right -=1\r\n                \r\n        return ans"
  },
  {
    "leetcode_id": "squares-of-a-sorted-array",
    "title": "Squares of a sorted array",
    "tags": [
      "array",
      "two pointer"
    ],
    "python_solution": "class Solution:\r\n    def sortedSquares(self, nums: List[int]) -> List[int]:\r\n        left = 0\r\n        right = len(nums)-1\r\n        ans = [0]*len(nums)\r\n        i = right\r\n        while(left<=right):\r\n            if(abs(nums[left])>abs(nums[right])):\r\n                ans[i]= nums[left]**2\r\n                left+=1\r\n            else:\r\n                ans[i]=nums[right]**2\r\n                right-=1\r\n            i-=1\r\n        return ans"
  },
  {
    "leetcode_id": "remove-duplicates-from-sorted-array-ii",
    "title": "Remove duplicates from sorted array ii",
    "tags": [
      "array",
      "two-pointer"
    ],
    "python_solution": "from typing import List\r\n\r\nclass Solution:\r\n    def removeDuplicates(self, arr: List[int]) -> int:\r\n        if len(arr) <= 2:\r\n            return len(arr)\r\n\r\n        prev = 1  \r\n        count = 1\r\n\r\n        for cur in range(1, len(arr)):\r\n            if arr[cur] == arr[cur - 1]:\r\n                count += 1\r\n            else:\r\n                count = 1 \r\n\r\n            if count <= 2:\r\n                arr[prev] = arr[cur]\r\n                prev += 1\r\n\r\n        return prev\r\n"
  },
  {
    "leetcode_id": "find-the-duplicate-number",
    "title": "Find the Duplicate Number",
    "tags": [
      "array",
      "two-pointer"
    ],
    "python_solution": "class Solution:\r\n    def findDuplicate(self, nums: List[int]) -> int:\r\n        slow = nums[0]\r\n        fast = nums[0]\r\n        while True:\r\n            slow = nums[slow]\r\n            fast = nums[nums[fast]]\r\n            if slow == fast:\r\n                break\r\n        fast = nums[0]\r\n        while slow != fast:\r\n            slow = nums[slow]\r\n            fast = nums[fast]\r\n        return slow"
  },
  {
    "leetcode_id": "duplicate-zeros",
    "title": "Duplicate Zeros- Two pointer",
    "tags": [
      "array",
      "two pointer"
    ],
    "python_solution": "class Solution:\r\n    def duplicateZeros(self, arr: List[int]) -> None:\r\n        n = len(arr)\r\n        zeros = 0\r\n        \r\n        # Count how many zeros to duplicate within bounds\r\n        for i in range(n):\r\n            if i + zeros >= n - 1:\r\n                # Handle edge zero\r\n                if i + zeros == n - 1 and arr[i] == 0:\r\n                    arr[n - 1] = 0\r\n                    n -= 1  # Do not duplicate this zero\r\n                break\r\n            if arr[i] == 0:\r\n                zeros += 1\r\n        \r\n        # Second pass: go backwards and shift elements\r\n        for i in range(n - 1 - zeros, -1, -1):\r\n            if arr[i] == 0:\r\n                arr[i + zeros] = 0\r\n                zeros -= 1\r\n                arr[i + zeros] = 0\r\n            else:\r\n                arr[i + zeros] = arr[i]\r\n"
  },
  {
    "leetcode_id": "Remove Duplicates from Sorted List II",
    "title": "Remove Duplicates from Sorted List II",
    "tags": [
      "linkedlist",
      "two-pointer"
    ],
    "python_solution": "# Definition for singly-linked list.\r\n# class ListNode:\r\n#     def __init__(self, val=0, next=None):\r\n#         self.val = val\r\n#         self.next = next\r\nclass Solution:\r\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\r\n        dummy = ListNode(0)\r\n        dummy.next = head\r\n\r\n        prev = dummy\r\n        current = head\r\n\r\n        while(current):\r\n            if(current.next and current.val == current.next.val):\r\n                duplicate = current.val\r\n                while(current and current.val == duplicate):\r\n                    current =current.next\r\n\r\n                prev.next = current\r\n            else:\r\n                prev = current\r\n                current=current.next\r\n                \r\n        return dummy.next"
  },
  {
    "leetcode_id": "Remove Duplicates from Sorted List",
    "title": "Remove Duplicates from Sorted List",
    "tags": [
      "linkedlist",
      "two-pointer"
    ],
    "python_solution": "# Definition for singly-linked list.\r\n# class ListNode:\r\n#     def __init__(self, val=0, next=None):\r\n#         self.val = val\r\n#         self.next = next\r\nclass Solution:\r\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\r\n        if not head:\r\n            return None\r\n        \r\n        temp = head\r\n        while( temp and temp.next):\r\n            if(temp.val == temp.next.val):\r\n                temp.next = temp.next.next\r\n\r\n            else:\r\n                temp = temp.next\r\n        return head"
  },
  {
    "leetcode_id": "two-sum",
    "title": "Two sum using two pointer",
    "tags": [
      "array",
      "two pointer"
    ],
    "python_solution": "class Solution:\r\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\r\n        nums_with_index = list(enumerate(nums))\r\n        \r\n        nums_with_index.sort(key=lambda x: x[1])\r\n        \r\n        # Two-pointer search\r\n        left = 0\r\n        right = len(nums_with_index) - 1\r\n\r\n        while left < right:\r\n            current_sum = nums_with_index[left][1] + nums_with_index[right][1]\r\n            \r\n            if current_sum == target:\r\n                return [nums_with_index[left][0], nums_with_index[right][0]]  \r\n            elif current_sum < target:\r\n                left += 1\r\n            else:\r\n                right -= 1\r\n\r\n        return []\r\n"
  }
]